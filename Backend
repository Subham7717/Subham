# app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
import sqlite3
import joblib
import os
from sklearn.feature_extraction.text import TfidfVectorizer

app = Flask(__name__)
CORS(app)

# Load model and vectorizer
model = joblib.load("model/naive_bayes_model.pkl")
vectorizer = joblib.load("model/tfidf_vectorizer.pkl")

DB_PATH = "data/complaints.db"

# Ensure DB exists
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS complaints (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            description TEXT NOT NULL,
            category TEXT NOT NULL,
            urgency TEXT NOT NULL,
            status TEXT DEFAULT 'Pending'
        )
    """)
    conn.commit()
    conn.close()

@app.route("/submit-complaint", methods=["POST"])
def submit_complaint():
    data = request.get_json()
    description = data.get("description")
    category = data.get("category")
    X = vectorizer.transform([description])
    urgency = model.predict(X)[0]

    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO complaints (description, category, urgency) VALUES (?, ?, ?)", (description, category, urgency))
    conn.commit()
    complaint_id = cur.lastrowid
    conn.close()

    return jsonify({"id": complaint_id, "description": description, "category": category, "urgency": urgency, "status": "Pending"})

@app.route("/get-complaints", methods=["GET"])
def get_complaints():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, description, category, urgency, status FROM complaints ORDER BY id DESC")
    rows = cur.fetchall()
    conn.close()

    complaints = [
        {"id": r[0], "description": r[1], "category": r[2], "urgency": r[3], "status": r[4]} for r in rows
    ]
    return jsonify(complaints)

if __name__ == "__main__":
    if not os.path.exists("data"):
        os.makedirs("data")
    init_db()
    app.run(host="0.0.0.0", port=5000)
